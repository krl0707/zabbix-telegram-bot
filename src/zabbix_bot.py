#!/usr/bin/env python3
import sys
import json
import logging
import asyncio
from datetime import datetime, timedelta
from telegram import Update, Bot
from telegram.ext import Application, CommandHandler, ContextTypes
from zabbix_api import ZabbixAPI
from database import Database
from alert_processor import process_alert

# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
with open('config.json') as f:
    config = json.load(f)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    filename=config['log_path'],
    level=logging.INFO,
    format='%(asctime)s | %(levelname)s | %(message)s'
)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
db = Database(config['db_path'])
zabbix = ZabbixAPI(
    config['zabbix_api_url'],
    config['zabbix_api_user'],
    config['zabbix_api_password'],
    config['zabbix_maintenance_groupid']
)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚úÖ Zabbix Bot –∞–∫—Ç–∏–≤–µ–Ω! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥")

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    help_text = """
üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/graph [triggerid] - –ì—Ä–∞—Ñ–∏–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∑–∞ 24 —á–∞—Å–∞
/history_tags - –ò—Å—Ç–æ—Ä–∏—è —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–π –ø–æ —Ç–µ–≥–∞–º
/mute [—á–∞—Å—ã] - –û—Ç–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (–ø–æ —É–º–æ–ª—á. 24—á)
/unmute - –í–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
/mute_status - –ê–∫—Ç–∏–≤–Ω—ã–µ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è
"""
    await update.message.reply_text(help_text)

async def graph_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        trigger_id = context.args[0] if context.args else db.get_last_trigger(update.message.chat_id)
        if not trigger_id:
            await update.message.reply_text("‚ùå Trigger ID –Ω–µ —É–∫–∞–∑–∞–Ω –∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∏—Å—Ç–æ—Ä–∏–∏")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏ —Å—Ç—Ä–æ–∏–º –≥—Ä–∞—Ñ–∏–∫
        items = zabbix.get_trigger_items(trigger_id)
        for item in items:
            history = zabbix.get_item_history(item['itemid'], config['graph_hours'])
            if history:
                plot_path = f"graph_{item['itemid']}.png"
                # –ó–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∫–æ–¥ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ —Å –ø–æ–º–æ—â—å—é matplotlib
                await update.message.reply_photo(photo=open(plot_path, 'rb'))
    
    except Exception as e:
        logger.error(f"Graph command error: {str(e)}")
        await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–∏ –≥—Ä–∞—Ñ–∏–∫–æ–≤")

async def mute_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        hours = int(context.args[0]) if context.args else config['default_mute_hours']
        chat_id = update.message.chat_id
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ç—Ä–∏–≥–≥–µ—Ä –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞
        trigger_id, host_id, tags = db.get_last_alert(chat_id)
        if not trigger_id:
            await update.message.reply_text("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∞–ª–µ—Ä—Ç–æ–≤ –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞")
            return
        
        # –°–æ–∑–¥–∞–µ–º maintenance –≤ Zabbix
        maintenance_id = zabbix.create_maintenance([host_id], tags, hours)
        if maintenance_id:
            mute_until = datetime.now() + timedelta(hours=hours)
            db.add_mute(chat_id, maintenance_id, trigger_id, host_id, mute_until)
            await update.message.reply_text(f"üîá –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã –Ω–∞ {hours} —á–∞—Å–æ–≤")
        else:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–µ—Ä–∏–æ–¥–∞ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è")
    
    except Exception as e:
        logger.error(f"Mute command error: {str(e)}")
        await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")

# –û—Å—Ç–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã (history_tags, unmute, mute_status) —Ä–µ–∞–ª–∏–∑—É—é—Ç—Å—è –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ

def main():
    # –†–µ–∂–∏–º –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞–ª–µ—Ä—Ç–æ–≤
    if len(sys.argv) > 2:
        process_alert(sys.argv[1], sys.argv[2], config, zabbix, db)
        return
    
    # –†–µ–∂–∏–º Telegram –±–æ—Ç–∞
    application = Application.builder().token(config['bot_token']).build()
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("graph", graph_command))
    application.add_handler(CommandHandler("mute", mute_command))
    # –î–æ–±–∞–≤—å—Ç–µ –¥—Ä—É–≥–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∑–¥–µ—Å—å
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á
    job_queue = application.job_queue
    job_queue.run_repeating(auto_unmute, interval=3600, first=10)
    
    application.run_polling()

if __name__ == "__main__":
    main()
    